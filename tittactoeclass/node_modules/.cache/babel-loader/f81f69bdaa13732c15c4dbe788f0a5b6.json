{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/tittactoeclass/src/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport calculateWinner from './calculateWinner';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = [...this.state.history, ...(this.state.stepNumber + 1)];\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let status;\n    winner ? status = `${winner} a gagné` : status = `Prochain joueur : ${this.state.xIsNext ? 'X' : 'O'}`; // Condition ternaire à choix multiple (+p condition)\n    // condition 1 ? éxécution 1 :\n    // condition 2 ? éxécution 2 :\n    // condition 3 ? éxécution 3 :\n    // éxécution 4;\n    // cette condition ternaire ===\n    // if(cond1){éxécution 1}\n    // else if(cond2) {éxécution 2}\n    // else if(cond3) {éxécution 3}\n    // {éxécution 4}\n\n    const moves = history.map((step, move) => {\n      const desc = move ? `Revenir au tour n°${move}` : \"Revenir au début de la partie\";\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, desc));\n    });\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // ========================================\n\n\nexport default Game;","map":{"version":3,"sources":["/home/user/Documents/tittactoeclass/src/App.js"],"names":["React","Board","calculateWinner","Game","Component","constructor","props","state","history","squares","Array","fill","stepNumber","xIsNext","handleClick","i","current","length","slice","setState","concat","jumpTo","step","render","winner","status","moves","map","move","desc"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport calculateWinner from './calculateWinner';\n\n\n\n  class Game extends React.Component {\n    constructor (props) {\n      super(props);\n          this.state = {\n            history : [{\n              squares : Array(9).fill(null)\n            }],\n            stepNumber : 0,\n            xIsNext : true \n      };\n  }\n\n  handleClick(i) {\n    const history = [...this.state.history, ...this.state.stepNumber + 1];\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n\n\n\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares\n      }]),\n      stepNumber : history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber : step,\n      xIsNext : (step % 2) === 0,\n    });\n  }\n\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n      let status;\n\n      winner ? status = `${winner} a gagné` : status = `Prochain joueur : ${this.state.xIsNext ? 'X' : 'O'}`;\n      // Condition ternaire à choix multiple (+p condition)\n          // condition 1 ? éxécution 1 :\n          // condition 2 ? éxécution 2 :\n          // condition 3 ? éxécution 3 :\n          // éxécution 4;\n\n          // cette condition ternaire ===\n          // if(cond1){éxécution 1}\n          // else if(cond2) {éxécution 2}\n          // else if(cond3) {éxécution 3}\n          // {éxécution 4}\n\n          const moves = history.map((step, move) => {\n            const desc = move ? `Revenir au tour n°${move}` : \"Revenir au début de la partie\";\n            return(\n              <li key={move}>\n                <button onClick={ () => this.jumpTo(move)}>{desc}</button>\n              </li>\n            );\n          });\n\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n              squares={current.squares}\n              onClick={i => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{ status }</div>\n            <ol>{ moves }</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}