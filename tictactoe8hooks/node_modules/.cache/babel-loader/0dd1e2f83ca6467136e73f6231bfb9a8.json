{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/tictactoehooks/src/App.js\";\nimport React, { useState } from 'react';\nimport './index.css';\n\nfunction Game() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n} // square\n// value (props)\n// onClick  function (props)\n\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.value);\n} // Board\n\n\nfunction Board() {\n  // state\n  // boardState\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null)); // turnState\n\n  const [xIsNext, setXIsNext] = useState(true); // handleClick\n\n  const handleCLick = index => {\n    // copy of our board state\n    const squares = [...boardSquares]; // if the index of the board is filled, return\n\n    if (squares[index]) return; // mutate that copy, and add X or O\n\n    squares[index] = xIsNext ? \"X\" : \"O\"; // calculate next turn\n    // set the state of the board\n\n    setBoardSquares(squares); // set the state of the turn\n\n    setXIsNext(!xIsNext);\n  }; // creat our Board\n  // creat a render square function\n\n\n  const renderSquares = index => {\n    return React.createElement(Square, {\n      value: boardSquares[index],\n      onClick: () => handleCLick(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  }; //  take in an index\n  // return a square, with the correct value and function\n  // initialize the status\n\n\n  let status;\n  status = `Next player ${xIsNext ? 'X' : 'O'}`;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, status), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, renderSquares(0), renderSquares(1), renderSquares(2)), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, renderSquares(3), renderSquares(4), renderSquares(5)), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, renderSquares(6), renderSquares(7), renderSquares(8)));\n} // function that calculates the winner\n\n\nfunction calculateWinner(squares) {\n  // get our set of winning lines\n  const winningLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // loop through this set\n  // check to see if values in our squares array fulfill the winning \n}\n\nexport default Game;","map":{"version":3,"sources":["/home/user/Documents/tictactoehooks/src/App.js"],"names":["React","useState","Game","Square","props","onClick","value","Board","boardSquares","setBoardSquares","Array","fill","xIsNext","setXIsNext","handleCLick","index","squares","renderSquares","status","calculateWinner","winningLines"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,aAAP;;AAEA,SAASC,IAAT,GAAgB;AACd,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,C,CAED;AACE;AACA;;;AACF,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SAEA;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDD,KAAK,CAACE,KAA1D,CAFA;AAID,C,CAED;;;AAEA,SAASC,KAAT,GAAiB;AACf;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAhD,CAHe,CAIb;;AACF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CALe,CAMf;;AACA,QAAMa,WAAW,GAAGC,KAAK,IAAI;AAC3B;AACA,UAAMC,OAAO,GAAG,CAAC,GAAGR,YAAJ,CAAhB,CAF2B,CAG3B;;AACA,QAAIQ,OAAO,CAACD,KAAD,CAAX,EAAoB,OAJO,CAK3B;;AACAC,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBH,OAAO,GAAG,GAAH,GAAS,GAAjC,CAN2B,CAO3B;AAEA;;AACAH,IAAAA,eAAe,CAACO,OAAD,CAAf,CAV2B,CAW3B;;AACAH,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAbD,CAPe,CAqBf;AAEA;;;AACA,QAAMK,aAAa,GAAGF,KAAK,IAAI;AAC7B,WAAO,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEP,YAAY,CAACO,KAAD,CAA3B;AAAoC,MAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,CAxBe,CA2Bb;AACE;AACA;;;AACA,MAAIG,MAAJ;AACAA,EAAAA,MAAM,GAAI,eAAcN,OAAO,GAAG,GAAH,GAAS,GAAK,EAA7C;AACJ,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBM,MAAzB,CADA,EAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BD,aAAa,CAAC,CAAD,CAAzC,EAA8CA,aAAa,CAAC,CAAD,CAA3D,EAAgEA,aAAa,CAAC,CAAD,CAA7E,CAFF,EAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,aAAa,CAAC,CAAD,CAAzC,EAA8CA,aAAa,CAAC,CAAD,CAA3D,EAAgEA,aAAa,CAAC,CAAD,CAA7E,CAHF,EAIE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,aAAa,CAAC,CAAD,CAAzC,EAA8CA,aAAa,CAAC,CAAD,CAA3D,EAAgEA,aAAa,CAAC,CAAD,CAA7E,CAJF,CADA;AAQD,C,CAEC;;;AACA,SAASE,eAAT,CAAyBH,OAAzB,EAAkC;AAChC;AACA,QAAMI,YAAY,GAAG,CACnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADmB,EAEnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFmB,EAGnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHmB,EAInB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJmB,EAKnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CALmB,EAMnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CANmB,EAOnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPmB,EAQnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARmB,CAArB,CAFgC,CAYhC;AAEA;AACD;;AAEH,eAAelB,IAAf","sourcesContent":["import React, {useState} from 'react';\nimport './index.css';\n\nfunction Game() {\n  return (\n    <div>\n      <Board/>\n    </div>\n  );\n}\n\n// square\n  // value (props)\n  // onClick  function (props)\nfunction Square(props) {\n  return(\n\n  <button className=\"square\" onClick={props.onClick}>{props.value}</button>\n  )\n}\n\n// Board\n\nfunction Board() {\n  // state\n  // boardState\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\n    // turnState\n  const [xIsNext, setXIsNext] = useState(true);\n  // handleClick\n  const handleCLick = index => {\n    // copy of our board state\n    const squares = [...boardSquares];\n    // if the index of the board is filled, return\n    if (squares[index]) return;\n    // mutate that copy, and add X or O\n    squares[index] = xIsNext ? \"X\" : \"O\"\n    // calculate next turn\n\n    // set the state of the board\n    setBoardSquares(squares)\n    // set the state of the turn\n    setXIsNext(!xIsNext);\n  };\n  // creat our Board\n\n  // creat a render square function\n  const renderSquares = index => {\n    return <Square value={boardSquares[index]} onClick={() => handleCLick(index)}/>\n  }\n    //  take in an index\n      // return a square, with the correct value and function\n      // initialize the status\n      let status;\n      status = `Next player ${xIsNext ? 'X' : 'O' }`\n  return(\n  <div>\n  <div className=\"status\">{status}</div>\n    <div className=\"board-row\">{renderSquares(0)}{renderSquares(1)}{renderSquares(2)}</div>\n    <div className=\"board-row\">{renderSquares(3)}{renderSquares(4)}{renderSquares(5)}</div>\n    <div className=\"board-row\">{renderSquares(6)}{renderSquares(7)}{renderSquares(8)}</div>\n  </div>\n  )\n}\n\n  // function that calculates the winner\n  function calculateWinner(squares) {\n    // get our set of winning lines\n    const winningLines = [\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6]\n    ];\n    // loop through this set\n    \n    // check to see if values in our squares array fulfill the winning \n  }\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}