{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/tictactoe8hooks/src/Board.jsx\";\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport calculateWinner from './calculateWinner.js'; // Board\n\nconst Board = () => {\n  // state\n  // boardState\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null)); // turnState\n\n  const [xIsNext, setXIsNext] = useState(true); // handleClick\n\n  const handleCLick = index => {\n    // copy of our board state\n    const squares = [...boardSquares]; // if the index of the board is filled, return\n\n    if (calculateWinner(boardSquares) || squares[index]) return; // mutate that copy, and add X or O\n\n    squares[index] = xIsNext ? \"X\" : \"O\"; // calculate next turn\n    // set the state of the board\n\n    setBoardSquares(squares); // set the state of the turn\n\n    setXIsNext(!xIsNext);\n  }; // creat our Board\n  // creat a render square function\n\n\n  const renderSquares = index => {\n    return React.createElement(Square, {\n      value: boardSquares[index],\n      onClick: () => handleCLick(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    });\n  }; //  take in an index\n  // return a square, with the correct value and function\n  // initialize the status\n\n\n  let status;\n  const winner = calculateWinner(boardSquares);\n  status = winner ? `Winner is : ${winner}` : `Next player ${xIsNext ? 'X' : 'O'}`;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, status), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, renderSquares(0), renderSquares(1), renderSquares(2)), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, renderSquares(3), renderSquares(4), renderSquares(5)), React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, renderSquares(6), renderSquares(7), renderSquares(8)));\n}; //   merde c pas simple les hooks\n\n\nexport default Board;","map":{"version":3,"sources":["/home/user/Documents/tictactoe8hooks/src/Board.jsx"],"names":["React","useState","Square","calculateWinner","Board","boardSquares","setBoardSquares","Array","fill","xIsNext","setXIsNext","handleCLick","index","squares","renderSquares","status","winner"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,eAAP,MAA4B,sBAA5B,C,CAEA;;AACA,MAAMC,KAAK,GAAG,MAAM;AAChB;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAACM,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAhD,CAHgB,CAId;;AACF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC,CALgB,CAMhB;;AACA,QAAMU,WAAW,GAAGC,KAAK,IAAI;AAC3B;AACA,UAAMC,OAAO,GAAG,CAAC,GAAGR,YAAJ,CAAhB,CAF2B,CAG3B;;AACA,QAAIF,eAAe,CAACE,YAAD,CAAf,IAAiCQ,OAAO,CAACD,KAAD,CAA5C,EAAqD,OAJ1B,CAK3B;;AACAC,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBH,OAAO,GAAG,GAAH,GAAS,GAAjC,CAN2B,CAO3B;AAEA;;AACAH,IAAAA,eAAe,CAACO,OAAD,CAAf,CAV2B,CAW3B;;AACAH,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAbD,CAPgB,CAqBhB;AAEA;;;AACA,QAAMK,aAAa,GAAGF,KAAK,IAAI;AAC7B,WAAO,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAEP,YAAY,CAACO,KAAD,CAA3B;AAAoC,MAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,CAxBgB,CA2Bd;AACE;AACA;;;AACA,MAAIG,MAAJ;AACA,QAAMC,MAAM,GAAGb,eAAe,CAACE,YAAD,CAA9B;AACAU,EAAAA,MAAM,GAAGC,MAAM,GAAI,eAAcA,MAAO,EAAzB,GAA8B,eAAcP,OAAO,GAAG,GAAH,GAAS,GAAK,EAAhF;AACJ,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBM,MAAzB,CADA,EAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BD,aAAa,CAAC,CAAD,CAAzC,EAA8CA,aAAa,CAAC,CAAD,CAA3D,EAAgEA,aAAa,CAAC,CAAD,CAA7E,CAFF,EAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,aAAa,CAAC,CAAD,CAAzC,EAA8CA,aAAa,CAAC,CAAD,CAA3D,EAAgEA,aAAa,CAAC,CAAD,CAA7E,CAHF,EAIE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,aAAa,CAAC,CAAD,CAAzC,EAA8CA,aAAa,CAAC,CAAD,CAA3D,EAAgEA,aAAa,CAAC,CAAD,CAA7E,CAJF,CADA;AAQD,CAzCH,C,CA2CA;;;AAEA,eAAeV,KAAf","sourcesContent":["import React, { useState } from 'react'\nimport Square from './Square';\nimport calculateWinner from './calculateWinner.js'\n\n// Board\nconst Board = () => {\n    // state\n    // boardState\n    const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\n      // turnState\n    const [xIsNext, setXIsNext] = useState(true);\n    // handleClick\n    const handleCLick = index => {\n      // copy of our board state\n      const squares = [...boardSquares];\n      // if the index of the board is filled, return\n      if (calculateWinner(boardSquares) || squares[index]) return;\n      // mutate that copy, and add X or O\n      squares[index] = xIsNext ? \"X\" : \"O\"\n      // calculate next turn\n  \n      // set the state of the board\n      setBoardSquares(squares)\n      // set the state of the turn\n      setXIsNext(!xIsNext);\n    };\n    // creat our Board\n  \n    // creat a render square function\n    const renderSquares = index => {\n      return <Square value={boardSquares[index]} onClick={() => handleCLick(index)}/>\n    }\n      //  take in an index\n        // return a square, with the correct value and function\n        // initialize the status\n        let status;\n        const winner = calculateWinner(boardSquares);\n        status = winner ? `Winner is : ${winner}` : `Next player ${xIsNext ? 'X' : 'O' }`\n    return(\n    <div>\n    <div className=\"status\">{status}</div>\n      <div className=\"board-row\">{renderSquares(0)}{renderSquares(1)}{renderSquares(2)}</div>\n      <div className=\"board-row\">{renderSquares(3)}{renderSquares(4)}{renderSquares(5)}</div>\n      <div className=\"board-row\">{renderSquares(6)}{renderSquares(7)}{renderSquares(8)}</div>\n    </div>\n    )\n  }\n\n//   merde c pas simple les hooks\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}