{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/tictactoehooks/src/App.js\";\nimport React, { useState } from 'react';\nimport './index.css';\n\nfunction Game() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n} // square\n// value (props)\n// onClick  function (props)\n\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.value);\n} // Board\n\n\nfunction Board() {\n  // state\n  // boardState\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null)); // turnState\n\n  const [xIsNext, setXIsNext] = useState(true); // handleClick\n\n  const handleCLick = index => {\n    // copy of our board state\n    const squares = [...boardSquares]; // if the index of the board is filled, return\n\n    if (squares[index]) return; // mutate that copy, and add X or O\n\n    squares[index] = xIsNext ? \"X\" : \"O\"; // calculate next turn\n    // set the state of the board\n\n    setBoardSquares(squares); // set the state of the turn\n\n    setXIsNext(!xIsNext);\n  }; // creat our Board\n  // creat a render square function\n  //  take in an index\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n} // function that calculates the winner\n\n\nexport default Game;","map":{"version":3,"sources":["/home/user/Documents/tictactoehooks/src/App.js"],"names":["React","useState","Game","Square","props","onClick","value","Board","boardSquares","setBoardSquares","Array","fill","xIsNext","setXIsNext","handleCLick","index","squares"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,aAAP;;AAEA,SAASC,IAAT,GAAgB;AACd,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,C,CAED;AACE;AACA;;;AACF,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SAEA;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDD,KAAK,CAACE,KAA1D,CAFA;AAID,C,CAED;;;AAEA,SAASC,KAAT,GAAiB;AACf;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAhD,CAHe,CAIb;;AACF,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CALe,CAMf;;AACA,QAAMa,WAAW,GAAGC,KAAK,IAAI;AAC3B;AACA,UAAMC,OAAO,GAAG,CAAC,GAAGR,YAAJ,CAAhB,CAF2B,CAG3B;;AACA,QAAIQ,OAAO,CAACD,KAAD,CAAX,EAAoB,OAJO,CAK3B;;AACAC,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBH,OAAO,GAAG,GAAH,GAAS,GAAjC,CAN2B,CAO3B;AAEA;;AACAH,IAAAA,eAAe,CAACO,OAAD,CAAf,CAV2B,CAW3B;;AACAH,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAbD,CAPe,CAqBf;AAEA;AACE;;;AACF,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADA;AAQD,C,CAEC;;;AAEF,eAAeV,IAAf","sourcesContent":["import React, {useState} from 'react';\nimport './index.css';\n\nfunction Game() {\n  return (\n    <div>\n      <div></div>\n    </div>\n  );\n}\n\n// square\n  // value (props)\n  // onClick  function (props)\nfunction Square(props) {\n  return(\n\n  <button className=\"square\" onClick={props.onClick}>{props.value}</button>\n  )\n}\n\n// Board\n\nfunction Board() {\n  // state\n  // boardState\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\n    // turnState\n  const [xIsNext, setXIsNext] = useState(true);\n  // handleClick\n  const handleCLick = index => {\n    // copy of our board state\n    const squares = [...boardSquares];\n    // if the index of the board is filled, return\n    if (squares[index]) return;\n    // mutate that copy, and add X or O\n    squares[index] = xIsNext ? \"X\" : \"O\"\n    // calculate next turn\n\n    // set the state of the board\n    setBoardSquares(squares)\n    // set the state of the turn\n    setXIsNext(!xIsNext);\n  };\n  // creat our Board\n\n  // creat a render square function\n    //  take in an index\n  return(\n  <div>\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n  )\n}\n\n  // function that calculates the winner\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}