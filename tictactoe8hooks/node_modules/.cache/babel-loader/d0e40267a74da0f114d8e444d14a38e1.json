{"ast":null,"code":"// function that calculates the winner\nconst calculateWinner = squares => {\n  // get our set of winning lines\n  const winningLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // loop through this set\n\n  for (let i = 0; i < winningLines.length; i++) {\n    // check to see if values in our squares array fulfill the winning \n    const [a, b, c] = winningLines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n      // if so, return X or O\n      return squares[a];\n    }\n  } // else, return nothing\n\n\n  return null;\n};\n\nexport default calculateWinner;","map":{"version":3,"sources":["/home/user/Documents/tictactoe8hooks/src/calculateWinner.js"],"names":["calculateWinner","squares","winningLines","i","length","a","b","c"],"mappings":"AAAI;AACA,MAAMA,eAAe,GAAGC,OAAO,IAAI;AAC/B;AACA,QAAMC,YAAY,GAAG,CACnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADmB,EAEnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFmB,EAGnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHmB,EAInB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJmB,EAKnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CALmB,EAMnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CANmB,EAOnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAPmB,EAQnB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CARmB,CAArB,CAF+B,CAY/B;;AACE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C;AACA,UAAM,CAACE,CAAD,EAAGC,CAAH,EAAKC,CAAL,IAAUL,YAAY,CAACC,CAAD,CAA5B;;AACA,QAAIF,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACK,CAAD,CAAP,KAAeL,OAAO,CAACM,CAAD,CAArE,EAAyE;AACvE;AACA,aAAON,OAAO,CAACI,CAAD,CAAd;AACD;AACF,GApB4B,CAqB7B;;;AACA,SAAO,IAAP;AACH,CAvBH;;AA0BJ,eAAeL,eAAf","sourcesContent":["    // function that calculates the winner\n    const calculateWinner = squares => {\n        // get our set of winning lines\n        const winningLines = [\n          [0,1,2],\n          [3,4,5],\n          [6,7,8],\n          [0,3,6],\n          [1,4,7],\n          [2,5,8],\n          [0,4,8],\n          [2,4,6]\n        ];\n        // loop through this set\n          for (let i = 0; i < winningLines.length; i++) {\n            // check to see if values in our squares array fulfill the winning \n            const [a,b,c] = winningLines[i];\n            if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]){\n              // if so, return X or O\n              return squares[a];\n            }\n          }\n          // else, return nothing\n          return null\n      }\n    \n\nexport default calculateWinner"]},"metadata":{},"sourceType":"module"}